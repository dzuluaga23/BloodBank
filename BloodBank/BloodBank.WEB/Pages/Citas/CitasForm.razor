@using BloodBank.Shared.Entidades
@inject IRepository repository


@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<EditForm EditContext="editContext" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Fecha:</label>
        <div>
            <InputDate @bind-Value="Cita.Fecha" />
            <ValidationMessage For="@(()=>Cita.Fecha)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Hora:</label>
        <div>
            <input type="time" @bind="Cita.Hora" class="form-control" />
            <ValidationMessage For="@(()=>Cita.Hora)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Cantidad:</label>
        <div>
            <InputNumber @bind-Value="Cita.Cantidad" />
            <ValidationMessage For="@(()=>Cita.Cantidad)" />
        </div>
    </div>

  

    <div class="mb-3">
        <label>Donante:</label>
        <div>
            <InputSelect @bind-Value="Cita.DonanteId" class="form-control">
                <option value="">Selecciona un donante</option>
                @foreach (var donante in Donantes)
                {
                    <option value="@donante.Id">@donante.Nombre</option> 
                }
            </InputSelect>
            <ValidationMessage For="@(() => Cita.DonanteId)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Enfermero:</label>
        <div>
            <InputSelect @bind-Value="Cita.EnfermeroId" class="form-control">
                <option value="">Selecciona un enfermero</option>
                @foreach (var enfermero in Enfermeros)
                {
                    <option value="@enfermero.Id">@enfermero.Nombre</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Cita.EnfermeroId)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" type="button" @onclick="ReturnAction">Regresar</button>


</EditForm>


@code {

    //NOTA: SE CAMBIO EL BOTON DE REGRESAR

    private EditContext editContext = null;

    protected override void OnInitialized()

    {
        editContext = new(Cita);

    }

    private List<Donante> Donantes { get; set; } = new List<Donante>();
    private List<Enfermero> Enfermeros { get; set; } = new List<Enfermero>();

    protected override async Task OnInitializedAsync()
    {
        var responseDonantes = await repository.GetDonantesAsync();
        if (!responseDonantes.Error && responseDonantes.Response != null)
        {
            Donantes = responseDonantes.Response;
        }

        var responseEnfermeros = await repository.GetEnfermerosAsync();
        if (!responseEnfermeros.Error && responseEnfermeros.Response != null)
        {
            Enfermeros = responseEnfermeros.Response;
        }
    }

    [EditorRequired]

    [Parameter]

    public Cita Cita { get; set; }





    [EditorRequired]

    [Parameter]

    public EventCallback OnSubmit { get; set; }



    [EditorRequired]

    [Parameter]



    public EventCallback ReturnAction { get; set; }





    public bool FormPostedSuccessfully { get; set; } = true; // ESTO SE MODIFICO A TRUE





    private async Task OnBeforeInternalNavigation(LocationChangingContext context)

    {

        var formWasEdited = editContext.IsModified();



        if (!formWasEdited || FormPostedSuccessfully) //SE AGREGO ESTA LOGICA

        {

            return;

        }



        //EL PROBLEMA RADICA EN QUE NUNCA ENTRA AQUI Y EN LA WEB NO MUESTRA ESTE MENSAJE



        var result = await swal.FireAsync(new SweetAlertOptions

            {

                Title = "Confirmación",

                Text = "¿Deseas abandonar la página y perder los cambios?",

                Icon = SweetAlertIcon.Warning,

                ShowCancelButton = true

            });



        var confirm = !string.IsNullOrEmpty(result.Value);



        if (confirm)

        {

            return;

        }



        context.PreventNavigation();

    }

}

