


@page "/inventarios/edit/{id:int}" 

@inject NavigationManager navigationManager 

@inject IRepository repository 

@inject SweetAlertService swal 

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

<h3>EDITAR INVENTARIO</h3> 

@if(inventario is null) 

{ 
    <p>Cargando ...</p> 
} 

else 

{ 
    <InventarioForm @ref="inventarioForm"  Inventario="inventario" OnSubmit="Edit" ReturnAction="Return" /> 
} 

@code { 

    private Inventario inventario; 

    private InventarioForm inventarioForm; 

    [Parameter] 

    public int Id { get; set; } 

    protected override async Task OnInitializedAsync() 

    { 
        var responseHTTP = await repository.GetAsync<Inventario>($"api/inventarios/{Id}"); 

        if (responseHTTP.Error) 

        { 
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound) 

            { 

                navigationManager.NavigateTo("inventarios"); 

            } 

            else 

            { 

                var messageError = await responseHTTP.GetErrorMessageAsync(); 

                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error); 

            } 

        } 

        else 

        { 

            inventario = responseHTTP.Response; 

        } 

    } 

    private async Task Edit() 

    { 
        var responseHTTP = await repository.PutAsync("api/inventarios", inventario); 

        if (responseHTTP.Error) 

        { 
            var mensajeError = await responseHTTP.GetErrorMessageAsync(); 

            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error); 

        } 

        else 

        { 
            inventarioForm!.FormPostedSuccessfully = true; 

            navigationManager.NavigateTo("inventarios"); 

        } 

    } 

    private void Return() 

    { 

        navigationManager.NavigateTo("inventarios"); 

    } 

} 