@page "/donantes"
@using CurrieTechnologies.Razor.SweetAlert2
@using BloodBank.Shared.Entidades
@using BloodBank.WEB.Repositories
@using BloodBank.WEB.Shared
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@attribute [Authorize(Roles = "User")]

<h3>DONANTE</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/donantes/Create">Crear Donante</a>
</div>

<GenericList MyList="Donantes">
    <Body>
        <table class="table table-striped">
            <thead>

                <tr>
                    <th>Donante</th>
                </tr>

            </thead>
            <tbody>

                @foreach (var donante in Donantes)
                {
                    <tr>
                        <td>

                            @donante.Documento
                        </td>

                        <td>

                            @donante.Nombre

                        </td>



                        <td>

                            @donante.Apellido

                        </td>


                        <td>

                            @donante.Correo

                        </td>
                        <td>

                            @donante.Sangre

                        </td>
                        <td>

                            @donante.Fecha

                        </td>

                        <td>

                            @donante.Telefono

                        </td>

                        <td>

                            <a href="/Donantes/edit/@donante.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>

                            <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(donante))><i class="oi oi-trash" /> Borrar</button>
                        </td>

                    </tr>
                }

            </tbody>

        </table>


    </Body>
</GenericList>

@code {
    public List<Donante> Donantes { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.GetAsync<List<Donante>>("/api/Donantes");
        Donantes = responseHppt.Response!;
    }

    private async Task DeleteAsync(Donante Donante)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync<Donante>($"api/Donantes/{Donante.Id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}